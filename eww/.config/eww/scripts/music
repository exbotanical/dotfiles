#!/usr/bin/env bash
# TODO: cronjob to clean
# TODO: bandcamp, spotify, rumble, cineworld, netflix
COVERS_DIR="${XDG_CACHE_DIR:-$HOME/.cache}/eww_covers"

get_status () {
	local s=$1
	if [[ "$s" == 'Playing' ]]; then
		echo ''
	else
		echo ''
	fi
}

get_length_sec () {
	local len=$1
	if [[ -z "$len" ]]; then
		echo 0
	else
		bc <<< "$len / 1000000"
	fi
}

get_length_time () {
	local len=$1
	if [[ -n "$len" ]]; then
		len=$(bc <<< "$len / 1000000 + 1")
		date -d@"$len" +%M:%S
	else
		echo ''
	fi
}

get_position () {
	local pos=$1
	local len=$2
	if [[ -n "$pos" ]]; then
		bc -l <<< "$pos / $len * 100"
	else
		echo 0
	fi
}

get_position_time () {
	local pos=$1
	local len=$2
	if [[ -n "$pos" ]]; then
		date -d@"$(bc <<< "$pos / 1000000")" +%M:%S
	else
		echo ''
	fi
}

is_webp () {
	local path="$1"
	[[ "$(identify "$path"| awk '{print $2}')" == "WEBP" ]]
}

get_cover () {
	local img_path="$COVERS_DIR/cover_art.png"
	local cover_url="$1"

 	# If the cover image is a link, check if we need to download and process it
	if [[ "$cover_url" = https* ]]; then
		local file_path="$COVERS_DIR/$(basename "$cover_url")"

		# Download and process the cover image
		if [[ ! -e "$file_path" ]]; then
			wget -N "$cover_url" -o /dev/null

			# Handle YouTube and other media players that use webp images
			is_webp "$file_path" && {
				convert "$file_path" "$file_path.jpg" >/dev/null
				# Just replace the downloaded file with a converted version
				mv "$file_path.jpg" "$file_path"
			}
		fi

		# symlink it to the default cover image path
		# so we can cache the real file for later
		rm "$img_path" 2>/dev/null
		ln -s "$file_path" "$img_path"

		echo "$img_path"
	# No cover image :(
	elif [[ "$cover_url" == '' ]]; then
		echo ''
	# Return it as-is
	else
		echo "$cover_url"
	fi
}

sanitize () {
	echo "$1" | sed 's/"/\"/g'
}

truncate () {
	local str="$1"
	local max_len="$2"
	echo $str | awk -v len=$max_len '{ if (length($0) > len) print substr($0, 1, len-3) "..."; else print; }'
}

main () {
	mkdir -p "$COVERS_DIR"
	cd "$COVERS_DIR" || exit

	local prev_id=''

	playerctl -F metadata -f '{{title}}\{{artist}}\{{status}}\{{position}}\{{mpris:length}}\{{mpris:artUrl}}\{{xesam:url}}' 2>/dev/null | while IFS="$(printf '\')" read -r title artist status position len cover id; do
		# For YouTube, which sometimes emits events w/out `artUrl` or `url`
		cover_path=$(get_cover "$cover")
		if [[ "$id" != '' ]] && [[ "$id" != "$prev_id" ]]; then
			if [[ "$cover_path" != '' ]]; then
				cols=$(convert "$cover_path" -colors 2 -format "%c" histogram:info: | awk '{print $3}')
				color_1=$(echo "$cols" | head -1)
				color_2=$(echo "$cols" | tail -1)
			else
				color_1="#1e1e2e"
				color_2="#28283d"
			fi
		fi

		title=$(sanitize "$title")
		jaq --null-input -r -c \
			--arg artist "$(sanitize "$artist")" \
			--arg display_title "$(truncate "$title" 40)" \
			--arg title "$title" \
			--arg status "$(get_status "$status")" \
			--arg pos "$(get_position "$position" "$len")" \
			--arg pos_time "$(get_position_time "$position" "$len")" \
			--arg length "$(get_length_time "$len")" \
			--arg cover "$cover_path" \
			--arg color1 "$color_1" \
			--arg color2 "$color_2" \
			'{"artist": $artist, "title": $title, "display_title": $display_title, "status": $status, "position": $pos, "position_time": $pos_time, "length": $length, "cover": $cover, "color1": $color1, "color2": $color2}'

		prev_id=$id
	done
}

main "$*"
