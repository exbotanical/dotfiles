(defwidget control-panel-widget []
  (box
    :class "control-panel container"
    :space-evenly false
    :orientation "v"
    (box
      :class "top-row"
      :space-evenly false
      (label
        :class "time"
      :text "${time.hour}:${time.minute}")
      (box
        :class "date-box"
        :space-evenly false
        (label
          :class "date"
        :text {time.date})
        (label
          :class "day"
        :text {time.day})))
    
    (centerbox
      :class "system-row"
      (box
        :class "wifi-box"
        :space-evenly false
        :orientation "v"
        (box
          :class "box icon ${net.class}"
          :space-evenly false
          (button
            :onclick "scripts/net toggle"
          {net.icon})
          (label
            :class "control-panel separator"
          :text "│")
          (button
            :onclick "${EWW_CMD} close control-panel-window && nm-connection-editor &"
          ""))
        (label
          :text {net.essid}
          :xalign 0.5
        :limit-width 15))
      
      (box
        :class "bluetooth-box"
        :space-evenly false
        :orientation "v"
        (box
          :class "box icon ${bluetooth.class}"
          :space-evenly false
          (button
            :onclick "scripts/bluetooth toggle"
          {bluetooth.icon})
          (label
            :class "control-panel separator"
          :text "│")
          (button
            :onclick "${EWW_CMD} close control-panel-window && blueman-manager &"
          ""))
        (label
          :text {bluetooth.text}
          :xalign 0.5
          :tooltip "${bluetooth.text} ${bluetooth.battery}"
        :limit-width 15)
      )
      
      (box
        :class "airplane-box"
        :space-evenly false
        :orientation "v"
        (box
          :class "box icon ${airplane.class}"
          (button
            :onclick "scripts/airplane toggle"
          {airplane.icon}))
        (label
          :text "Airplane Mode"
          :xalign 0.5
        :limit-width 16))
    )
    
    (box
      :class "sliders-row"
      :orientation "v"
      (box
        :class "volume-slider-box"
        :space-evenly false
        (button
          :class "volume-icon icon"
          :onclick "scripts/volume mute SINK"
        {volume.icon})
        (scale
          :class "slider"
          :value {volume.percent}
          :tooltip "volume at ${volume.percent}%"
        :onchange "scripts/volume set_vol SINK {}"))
      (box
        :class "brightness-slider-box"
        :space-evenly false
        (button
          :class "icon"
        {brightness.icon})
        (scale
          :value {brightness.level}
          :marks true
        :onchange "light -S {}")))
    
    (box
      :class "system-info-box"
      :orientation "v"
      (box
        ; cpu
        (box
          :class "sys-box"
          :space-evenly false
          :halign "start"
          (circular-progress
            :value "${EWW_CPU.avg}"
            :class "sys-cpu"
            :thickness {sys_circle_thickness}
            (label
              :text ""
            :class "sys-icon-cpu icon"))
          (box
            :orientation "v"
            :vexpand false
            :class "system-info-text"
            (label
              :text "cpu"
              :halign "start"
            :class "sys-text-cpu")
            (label
              :text "${round(EWW_CPU.avg,2)}%"
              :halign "start"
            :class "sys-text-sub")))
        
        ; memory
        (box
          :class "sys-box"
          :space-evenly false
          :halign "end"
          (circular-progress
            :value {memory.percentage}
            :class "sys-mem"
            :thickness {sys_circle_thickness}
            (label
              :text ""
            :class "sys-icon-mem icon"))
          (box
            :orientation "v"
            :class "system-info-text"
            (label
              :text "memory"
              :halign "start"
            :class "sys-text-mem")
            (label
              :text "${memory.used} | ${memory.total}"
              :halign "start"
            :class "sys-text-sub"))))
      (box
        :class "sys-bottom-box"
        (box :halign "start"
          (label :class "battery-icon icon" :style "color: ${battery.color}" :text {battery.icon})
          (label :text "${EWW_BATTERY["BAT1"].capacity}%")
          (label :class "battery-status" :text {battery.status}))
        (box
          (label :text "󰣇  ${arch.version}")
          (label :halign "start" :class "battery-status" :text "(${arch.total})"))))))

(defwindow control-panel-window
  :stacking "bg"
  :monitor 0
  :wm-ignore true
  :geometry (geometry
    :x "0"
    :y "2"
    :width "0%"
    :height "0%"
  :anchor "right top")
  (control-panel-widget))
